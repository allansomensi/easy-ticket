# Generated by Django 5.0.1 on 2024-01-10 04:09

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sector', models.CharField(blank=True, choices=[('ALMOXARIFADO', 'Almoxarifado'), ('BALANCA', 'Balança'), ('COMERCIAL', 'Comercial'), ('COMPRAS', 'Compras'), ('CONTABILIDADE', 'Contabilidade'), ('CUSTOS', 'Custos'), ('DIRETORIA', 'Diretoria'), ('ENGENHARIA', 'Engenharia'), ('EXPEDICAO', 'Expedição'), ('FINANCEIRO', 'Financeiro'), ('FUNDICAO', 'Fundição'), ('LAB_METALURGICO', 'Laboratório Metalúrgico'), ('LAB_METROLOGICO', 'Laboratório Metrológico'), ('MANUTENCAO', 'Manutenção'), ('PCP', 'PCP'), ('PRESET', 'Preset'), ('QUALIDADE', 'Qualidade'), ('RH', 'RH'), ('REBARBACAO', 'Rebarbação'), ('RECEBIMENTO', 'Recebimento'), ('RECEPCAO', 'Recepção'), ('SESMT', 'SESMT'), ('TI', 'TI'), ('USINAGEM', 'Usinagem')], default=None, max_length=50, null=True)),
                ('extension', models.CharField(blank=True, default=None, max_length=3, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Feminino'), ('O', 'Outro')], max_length=1, null=True)),
                ('position', models.CharField(blank=True, choices=[('ANALISTA', 'Analista'), ('DESENVOLVEDOR', 'Desenvolvedor'), ('GERENTE', 'Gerente'), ('DIRETOR', 'Diretor'), ('ESTAGIARIO', 'Estagiário'), ('CONTROLLER', 'Controller'), ('COORDENADOR_COMPRAS', 'Coordenador de Compras'), ('COORDENADOR_LOGISTICA', 'Coordenador de Logística'), ('COORDENADOR_ENGENHARIA', 'Coordenador de Engenharia'), ('COORDENADOR_VENDAS', 'Coordenador de Vendas')], max_length=100, null=True)),
                ('period', models.CharField(blank=True, choices=[('DIURNO', 'Diurno'), ('NOTURNO', 'Noturno'), ('NAO_APLICAVEL', 'Não aplicável')], max_length=100, null=True)),
                ('admission_date', models.DateField(blank=True, null=True)),
                ('theme_preference', models.CharField(blank=True, choices=[('LIGHT', 'Modo Claro'), ('DARK', 'Modo Escuro')], default='LIGHT', max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
